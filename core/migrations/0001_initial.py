# Generated by Django 5.1.1 on 2024-09-15 08:46

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=250)),
                ('slug', models.SlugField(unique=True)),
                ('category', models.CharField(choices=[('Beverages', 'Beverages'), ('Fruits', 'Fruits'), ('Vegetables', 'Vegetables'), ('Grains and Cereals', 'Grains and Cereals'), ('Dairy and Dairy Alternatives', 'Dairy and Dairy Alternatives'), ('Meat and Poultry', 'Meat and Poultry'), ('Fish and Seafood', 'Fish and Seafood'), ('Legumes and Pulses', 'Legumes and Pulses'), ('Nuts and Seeds', 'Nuts and Seeds'), ('Herbs and Spices', 'Herbs and Spices'), ('Condiments and Sauces', 'Condiments and Sauces'), ('Snacks', 'Snacks'), ('Desserts and Sweets', 'Desserts and Sweets'), ('Baked Goods', 'Baked Goods'), ('Eggs', 'Eggs'), ('Oils and Fats', 'Oils and Fats'), ('Processed Foods', 'Processed Foods'), ('Frozen Foods', 'Frozen Foods'), ('Canned Foods', 'Canned Foods'), ('Organic Foods', 'Organic Foods'), ('Gluten-Free Foods', 'Gluten-Free Foods'), ('Vegan/Vegetarian Foods', 'Vegan/Vegetarian Foods'), ('Fermented Foods', 'Fermented Foods'), ('Superfoods', 'Superfoods'), ('Functional Foods', 'Functional Foods'), ('Baby Food', 'Baby Food'), ('Pet Food', 'Pet Food'), ('Alcoholic Beverages', 'Alcoholic Beverages'), ('Other', 'Other')], default='Other', max_length=40)),
                ('data', models.JSONField(default=dict)),
                ('has_plural_title', models.BooleanField(default=False)),
                ('rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('ai_generated_image', models.ImageField(blank=True, upload_to='ai_product_image/')),
                ('image', models.ImageField(blank=True, upload_to='product_image/')),
                ('short_description', models.CharField(max_length=250)),
                ('full_description', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=250)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.product')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='product',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='product', through='core.ProductTag', to='core.tag'),
        ),
    ]
